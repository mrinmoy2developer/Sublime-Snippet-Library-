<snippet>
	<content><![CDATA[
struct Bigint{
  static const int LEN = 60;
  static const int BIGMOD = 10000;
  int s,vl,v[LEN];
  Bigint():s(1){vl=0;}
  Bigint(ll a){
    s=1;vl=0;
    if(a<0)s=-1,a=-a;
    while(a)pb(a%BIGMOD),a/=BIGMOD;
  }
  Bigint(string str){
    s=1;vl=0;
    int stPos=0,num=0,q=1;
    if(!str.empty()&&str[0]=='-')stPos = 1,s=-1;
    fb(i,sz(str)-1,stPos){
      num+=(str[i]-'0')*q;
      if((q*=10)>=BIGMOD)pb(num),num=0,q=1;
    }
    if(num)pb(num);
    n();
  }
  int len()const{return vl;}
  bool empty()const{return len()==0;}
  void push_back(int x){v[vl++]=x;}
  void pop_back(){vl--;}
  int back() const{return v[vl-1];}
  void n(){while(!empty()&&!back())pop_back();}
  void resize(int nl) {vl = nl;fill(v, v+vl, 0);}
  void print() const {
    if(empty()){putchar('0');return;}
    if(s==-1)putchar('-');
    printf("%d",back());
    fb(i,len()-2,0)printf("%.4d",v[i]);
  }
  friend ostream& operator<<(ostream& out,const Bigint &a){
    if(a.empty()){out<<"0";return out;} 
    if(a.s==-1)out<<"-";
    out<<a.back();
    fb(i,a.len()-2,0){
      char str[10];
      snprintf(str,5,"%.4d",a.v[i]);
      out << str;
    }
    return out;
  }
  int cp3(const Bigint &b)const{
    if(s!=b.s)return s-b.s;
    if(s==-1)return -(-*this).cp3(-b);
    if(len()!=b.len())return len()-b.len();//int
    fb(i,len()-1,0)if(v[i]!=b.v[i])return v[i]-b.v[i];
    return 0;
  }
  bool operator<(const Bigint &b)const{return cp3(b)<0;}
  bool operator<=(const Bigint &b)const{return cp3(b)<=0;}
  bool operator==(const Bigint &b)const{return cp3(b)==0;}
  bool operator!=(const Bigint &b)const{return cp3(b)!=0;}
  bool operator>(const Bigint &b)const{return cp3(b)>0;}
  bool operator>=(const Bigint &b)const{return cp3(b)>=0;}
  Bigint operator-()const{
    Bigint r=(*this);
    r.s = -r.s;
    return r;
  }
  Bigint operator+(const Bigint &b)const{
    if(s==-1)return -(-(*this)+(-b));
    if(b.s==-1) return (*this)-(-b);
    Bigint r;
    int nl=max(len(),b.len());
    r.resize(nl+1);
    f(i,0,nl){
      if(i<len())r.v[i]+=v[i];
      if(i<b.len())r.v[i]+=b.v[i];
      if(r.v[i]>=BIGMOD)r.v[i+1]+=r.v[i]/BIGMOD,r.v[i]%=BIGMOD;
    }
    r.n();
    return r;
  }
  Bigint operator-(const Bigint &b)const{
    if(s==-1)return -(-(*this)-(-b));
    if(b.s==-1)return (*this)+(-b);
    if((*this)<b)return -(b-(*this));
    Bigint r;
    r.resize(len());
    f(i,0,len()){
      r.v[i]+=v[i];
      if(i<b.len())r.v[i]-=b.v[i];
      if(r.v[i]<0)r.v[i]+=BIGMOD,r.v[i+1]--;
    }
    r.n();
    return r;
  }
  Bigint operator*(const Bigint &b){
    Bigint r;
    r.resize(len()+b.len()+1);
    r.s=s*b.s;
    f(i,0,len()){
      f(j,0,b.len()){
        r.v[i+j]+=v[i]*b.v[j];
        if(r.v[i+j]>=BIGMOD)r.v[i+j+1]+=r.v[i+j]/BIGMOD,r.v[i+j]%=BIGMOD;
      }
    }
    r.n();
    return r;
  }
  Bigint operator/(const Bigint &b){
    Bigint r,b2=b;
    r.resize(max(1,len()-b.len()+1));
    int oriS=s;
    s=b2.s=r.s=1;
    fb(i,r.len()-1,0){
      int d=0,u=BIGMOD-1;
      while(d<u){
        int m=(d+u+1)>>1;
        r.v[i]=m;
        if((r*b2)>(*this))u=m-1;
        else d=m;
      }
      r.v[i]=d;
    }
    s = oriS;r.s=s*b.s;
    r.n();
    return r;
  }
  Bigint operator%(const Bigint &b){return (*this)-(*this)/b*b;}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Bigint</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
