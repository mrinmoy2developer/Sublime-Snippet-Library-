<snippet>
	<content><![CDATA[
template<int M=104857601>
struct MINT{
    int v;
    MINT():v(0){}
    MINT(ll n){
        v=(-M<=n&&n<M)?n:n% M;
        if(v<0)v+=M;
    }
    friend istream& operator>>(istream &inp,MINT &a){ 
        ll t;
        inp>>t;
        a=MINT(t);
        return inp; 
    }
    friend ostream& operator<<(ostream &out,const MINT &a){return out<<a.v;}
    friend bool operator==(const MINT &a,const MINT &b){return a.v==b.v;}
    friend bool operator!=(const MINT &a,const MINT &b){return a.v!=b.v;}
    friend MINT pw(MINT a,ll b){
        MINT r=1;
        while(b){
            if(b & 1)r*=a;
            b>>=1;a*=a;
        }
        return r;
    }
    friend MINT inv(const MINT a){return pw(a,M-2);}
    MINT operator-()const{return MINT(-v);}
    MINT& operator+=(const MINT m){if((v+=m.v)>=M)v-=M;return *this;}
    MINT& operator-=(const MINT m){if((v-=m.v)<0)v+=M;return *this;}
    MINT& operator*=(const MINT m){v=(ll)v*m.v%M;return *this;}
    MINT& operator/=(const MINT m){*this*=inv(m);return *this;}
    friend MINT operator+(MINT a,MINT b){a+=b;return a;}
    friend MINT operator-(MINT a,MINT b){a-=b;return a;}
    friend MINT operator*(MINT a,MINT b){a*=b;return a;}
    friend MINT operator/(MINT a,MINT b){a/=b;return a;}
    operator int32_t()const{return v;}
    operator int64_t()const{return v;}
};
namespace FFT{
    template<int W=3,int M=104857601>
    static void NTT(vector<MINT<M>>&f,bool inv_fft=0){
        using T=MINT<M>;
        int N=f.size();
        vector<T>root(N>>1);
        for(ll i=1,j=0;i<N;i++){
            int bit=N>>1;
            while(j>=bit)j-=bit,bit>>=1;
            j+=bit;
            if(i<j)swap(f[i],f[j]);
        }
        T ang=pw(T(W),(M-1)/N);
        if(inv_fft)ang=inv(ang);
        root[0]=1;
        f(i,1,N>>1)root[i]=root[i-1]*ang;
        for(int i=2;i<=N;i<<=1){
            int step=N/i;
            for(int j=0;j<N;j+=i)f(k,0,i/2){
                    T u=f[j+k],v=f[j+k+(i>>1)]*root[k*step];
                    f[j+k]=u+v;
                    f[j+k+(i>>1)]=u - v;
                }
        }
        if(inv_fft){
            T rev=inv(T(N));
            f(i,0,N)f[i]*=rev;
        }
    }
    template<int W=3,int M=104857601>
    vv<MINT<M>>multiply_ntt(vv<MINT<M>>a,vv<MINT<M>>b){
        int N=2;
        while(N<sz(a)+sz(b))N<<=1;
        a.resize(N); 
        b.resize(N);
        NTT<W,M>(a);
        NTT<W,M>(b);
        f(i,0,N)a[i]*=b[i];
        NTT<W,M>(a,1);
        return a;
    }
}
template<int W=3,int M=104857601>
struct PolyMod{
    using T=MINT<M>;
    vector<T>a;
    PolyMod(){}
    PolyMod(T a0):a(1,a0){normalize();}
    PolyMod(const vv<T>a):a(a){normalize();}
    int size()const{return sz(a);}
    int deg()const{return sz(a)-1;}
    void normalize(){while(sz(a)&&a.back()==T(0))a.ppb();}
    T operator[](int i)const{return a[i];}
    typename vector<T>::const_iterator begin()const{return a.begin();}
    typename vector<T>::const_iterator end()const{return a.end();}
    void push_back(const T x){a.pb(x);}
    void pop_back(){a.pb();}
    PolyMod reversed()const{
        vv<T>b=a;
        reverse(all(b));
        return b;
    }
    PolyMod trim(int n)const{return vv<T>(a.begin(),a.begin()+min(n,size()));}
    PolyMod inv(int n){
        PolyMod q(T(1)/a[0]);
        for(int i=1;i<n;i<<=1){
            PolyMod p=PolyMod(2)-q*trim(i*2);
            q=(p*q).trim(i<<1);
        }
        return q.trim(n);
    }
    PolyMod operator*=(const T x){
        fv(i,a)i*=x;
        normalize();
        return *this;
    }
    PolyMod operator/=(const T x){
        return *this*=(T(1)/T(x));
    }
    PolyMod operator+=(const PolyMod &b){
        a.resize(max(sz(a),sz(b)));
        f(i,0,sz(b))a[i]+=b.a[i];
        normalize();
        return *this;
    }
    PolyMod operator-=(const PolyMod &b){
        a.resize(max(sz(a),sz(b)));
        f(i,0,sz(b))a[i]-=b.a[i];
        normalize();
        return *this;
    }
    PolyMod operator*=(const PolyMod &b){
        *this=FFT::multiply_ntt<W,M>(a,b.a);
        normalize();
        return *this;
    }
    PolyMod operator/=(const PolyMod &b){
        if(deg()<b.deg())return *this=PolyMod();
        int sz=deg()-b.deg()+1;
        PolyMod ra=reversed().trim(sz),rb=b.reversed().trim(sz).inv(sz);
        *this=(ra*rb).trim(sz);
        for(int i=sz-size();i;i--)push_back(T(0));
        reverse(all(a));
        normalize();
        return *this;
    }
    PolyMod operator%=(const PolyMod &b){
        if(deg()<b.deg())return *this;
        PolyMod tmp=*this;tmp/=b;tmp*=b;
        *this-=tmp;
        normalize();
        return *this;
    }
    PolyMod operator*(const T x)const{return PolyMod(*this)*=x;}
    PolyMod operator/(const T x)const{return PolyMod(*this)/=x;}
    PolyMod operator+(const PolyMod &b)const{return PolyMod(*this)+=b;}
    PolyMod operator-(const PolyMod &b)const{return PolyMod(*this)-=b;}
    PolyMod operator*(const PolyMod &b)const{return PolyMod(*this)*= b;}
    PolyMod operator/(const PolyMod &b)const{return PolyMod(*this)/=b;}
    PolyMod operator%(const PolyMod &b)const{return PolyMod(*this)%=b;}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Polynomial</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
